# data file for the Fltk User Interface Designer (fluid)
version 1.0401
use_FL_COMMAND
utf8_in_src
header_name {.h}
code_name {.cxx}
decl {\#include <FL/Fl_Native_File_Chooser.H>} {public global
}

decl {\#include "ini.h"} {selected public global
}

decl {\#include "map.txt"} {private global
}

Function {pushFTD(mINI::INIStructure* fileIni)} {open
} {
  code {printf("Hello, World!\\n");} {}
}

Function {pullFTD(mINI::INIStructure* fileIni)} {open return_type void
} {
  code {printf("Hello, World!\\n");} {}
}

decl {\#include <FL/Fl_Table.H>
\#include <FL/fl_draw.H>} {public global
}

class WidgetTable {: {public Fl_Table}
} {
  Function {draw_cell(TableContext context, int R=0, int C=0, int X=0, int Y=0, int W=0, int H=0) FL_OVERRIDE} {open protected return_type void
  } {
    code {switch ( context )
    {
    case CONTEXT_STARTPAGE:
        fl_font(FL_HELVETICA, 12);                // font used by all headers
        break;

    case CONTEXT_RC_RESIZE:
    {
        int X, Y, W, H;
        int index = 0;
        for ( int r = 0; r<rows(); r++ )
        {
            for ( int c = 0; c<cols(); c++ )
            {
                if ( index >= children() ) break;
                find_cell(CONTEXT_TABLE, r, c, X, Y, W, H);
                child(index++)->resize(X,Y,W,H);
            }
        }
        init_sizes();                     // tell group children resized
        return;
    }

    case CONTEXT_ROW_HEADER:
        fl_push_clip(X, Y, W, H);
        {
            static char s[40];
            if (mapProperty.find(R) != mapProperty.end())
            {
                auto vec = mapProperty[R];
                std::sprintf(s, "%s", vec[0].c_str());
            }
            else
            {
                sprintf(s, "Row %d", R);
            }
            fl_draw_box(FL_THIN_UP_BOX, X, Y, W, H, row_header_color());
            fl_color(FL_BLACK);
            fl_draw(s, X, Y, W, H, FL_ALIGN_CENTER);
        }
        fl_pop_clip();
        return;

    case CONTEXT_COL_HEADER:
        fl_push_clip(X, Y, W, H);
        {
            static char s[40];
            sprintf(s, "Column %d", C);
            fl_draw_box(FL_THIN_UP_BOX, X, Y, W, H, col_header_color());
            fl_color(FL_BLACK);
            fl_draw(s, X, Y, W, H, FL_ALIGN_CENTER);
        }
        fl_pop_clip();
        return;

    case CONTEXT_CELL:
        return;

    default:
        return;
    }} {}
  }
  Function {WidgetTable(int x, int y, int w, int h, const char *l=0) : Fl_Table(x,y,w,h,l)} {open
  } {
    code {col_header(1);
    col_resize(1);
    col_header_height(25);
    row_header(1);
    row_resize(1);
    row_header_width(80);
    end();} {}
  }
  Function {~WidgetTable()} {open
  } {
    code {printf("Hello, World!\\n");} {}
  }
  Function {SetSize(int newrows, int newcols)} {open return_type void
  } {
    code {clear();            // clear any previous widgets, if any
    rows(newrows);
    cols(newcols);

    begin();            // start adding widgets to group
    {
      for ( int r = 0; r<newrows; r++ ) {
        for ( int c = 0; c<newcols; c++ ) {
          int X,Y,W,H;
          find_cell(CONTEXT_TABLE, r, c, X, Y, W, H);

          char s[40];
          if ( c & 1 ) {
            // Create the input widgets
            sprintf(s, "%d.%d", r, c);
            Fl_Input *in = new Fl_Input(X,Y,W,H);
            in->value(s);
          } else {
            // Create the light buttons
            sprintf(s, "%d/%d ", r, c);
            Fl_Light_Button *butt = new Fl_Light_Button(X,Y,W,H);
            butt->copy_label(s);
            butt->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
            butt->callback(button_cb, (void*)0);
            butt->value( ((r+c*2) & 4 ) ? 1 : 0);
          }
        }
      }
    }
    end();} {}
  }
}

comment {分隔符
分隔符
分隔符
分隔符
分隔符
分隔符
分隔符
分隔符} {in_source in_header
}

Function {make_window()} {} {
  Fl_Window windowMain {
    label fTool open
    xywh {849 284 720 480} type Double color 52 align 16 hide size_range {720 480 720 480}
  } {
    Fl_Menu_Bar barMain {open
      xywh {0 0 720 30} box THIN_UP_BOX color 52
    } {
      MenuItem menuitemFileopen {
        label {@fileopen}
        callback {Fl_Native_File_Chooser fnfc;
    fnfc.title("选择数据文件");
    fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
    fnfc.options(Fl_Native_File_Chooser::USE_FILTER_EXT);
    fnfc.filter("fTool Data File\\t*.ftd\\n");
    if ((fnfc.show() != 0) ||(!fnfc.filename())) return;
    mINI::INIFile fileFTD(fnfc.filename());
    mINI::INIStructure FTD;
    fileFTD.read(FTD);
    pullFTD(&FTD);}
        xywh {0 0 100 20} shortcut 0x4006f
      }
      MenuItem menuitemFilesave {
        label {@filesave}
        callback {Fl_Native_File_Chooser fnfc;
    fnfc.title("保存数据文件");
    fnfc.type(Fl_Native_File_Chooser::BROWSE_SAVE_FILE);
    fnfc.options(Fl_Native_File_Chooser::SAVEAS_CONFIRM | Fl_Native_File_Chooser::USE_FILTER_EXT);
    fnfc.filter("fTool Data File\\t*.ftd\\n");
    fnfc.preset_file("preset.ftd");
    if ((fnfc.show() != 0) ||(!fnfc.filename())) return;
    mINI::INIFile fileFTD(fnfc.filename());
    mINI::INIStructure FTD;
    pushFTD(&FTD);
    fileFTD.generate(FTD);}
        xywh {0 0 100 20} shortcut 0x40073 divider
      }
      MenuItem menuitemTitle {
        label {                                                                     fTool                                                                    }
        xywh {0 0 100 20} labelfont 1 deactivate divider
      }
      MenuItem menuitemMinimize {
        label {@2>}
        callback {Fl::belowmouse()->parent()->as_window()->iconize();}
        xywh {0 0 100 20}
      }
      MenuItem menuitemClose {
        label {@1+}
        callback {std::exit(0);}
        xywh {10 10 100 20}
        code0 {\#include <cstdlib>}
      }
    }
    Fl_Wizard wizardConnect {
      xywh {15 45 195 160} color 32
    } {
      Fl_Group groupConnectSocket {open
        xywh {15 45 195 160} box THIN_UP_FRAME color 52 labeltype NO_LABEL
      } {
        Fl_Input {} {
          label {@-3circle  远程主机地址}
          xywh {25 70 175 30} labelfont 1 labelsize 15 align 5
        }
        Fl_Input {} {
          label {@-3circle  远程主机端口}
          xywh {25 125 175 30} labelfont 1 labelsize 15 align 5
        }
        Fl_Button buttonToSerial {
          label {切换到串口}
          callback {wizardConnect->next();}
          xywh {25 165 85 30} color 52 labelfont 1
        }
        Fl_Light_Button {} {
          label {连接}
          xywh {120 165 80 30} box THIN_UP_BOX color 52 selection_color 63 labelfont 1 align 16
        }
      }
      Fl_Group groupConnectSerial {open
        xywh {15 45 195 160} box THIN_UP_FRAME color 52 labeltype NO_LABEL hide
      } {
        Fl_Input_Choice {} {
          label {@-3circle  端口}
          xywh {25 70 175 30} color 52 selection_color 52 labelfont 1 labelsize 15 align 5
        } {}
        Fl_Input_Choice {} {
          label {@-3circle  波特率(bps)} open
          xywh {25 125 175 30} color 52 selection_color 52 labelfont 1 labelsize 15 align 5
        } {
          MenuItem {} {
            label 9600
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label 115200
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label 460800
            xywh {0 0 100 20}
          }
        }
        Fl_Button buttonToSocket {
          label {切换套接字}
          callback {wizardConnect->prev();}
          xywh {25 165 85 30} color 52 labelfont 1
        }
        Fl_Light_Button {} {
          label {打开}
          xywh {120 165 80 30} box THIN_UP_BOX color 52 selection_color 63 labelfont 1 align 16
        }
      }
    }
    Fl_Button buttonRead {
      label {@refresh    读取所有参数}
      callback {fl_message("连接后自动读取参数，无需手动读取");}
      xywh {20 215 180 50} box THIN_UP_BOX color 52 labelfont 1
    }
    Fl_Button buttonCopy {
      label {@filenew    复制所有参数}
      xywh {20 275 180 50} box THIN_UP_BOX color 52 labelfont 1
    }
    Fl_Button buttonWrite {
      label {@2->|    写入所有参数}
      xywh {20 335 180 50} box THIN_UP_BOX color 52 labelfont 1
    }
    Fl_Button buttonCustom {
      label {@<->    自定义按钮1}
      xywh {20 395 180 50} box THIN_UP_BOX color 52 labelfont 1
    }
    Fl_Table iniTable {
      label {参数列表} open
      xywh {220 45 485 420} box THIN_UP_FRAME color 54 labeltype NO_LABEL labelfont 1 labelsize 15 align 21
      code0 {iniTable->SetSize(256, 4);}
      class WidgetTable
    } {}
  }
}
